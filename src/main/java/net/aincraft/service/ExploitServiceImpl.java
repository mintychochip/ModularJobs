package net.aincraft.service;

import com.google.common.base.Preconditions;
import java.time.temporal.TemporalAmount;
import java.util.Map;
import net.aincraft.api.service.ExploitProtectionStore;
import net.aincraft.api.service.ExploitService;
import net.kyori.adventure.key.Key;
import org.jetbrains.annotations.NotNull;

//TODO: optimize by cleaning up during chunk unloading
public class ExploitServiceImpl implements ExploitService {

  private final Map<Key, ExploitProtectionStore<?>> protectionProviders;

  public ExploitServiceImpl(Map<Key, ExploitProtectionStore<?>> protectionProviders) {
    this.protectionProviders = protectionProviders;
  }

  @Override
  public <T> void removeProtection(ExploitProtectionType<T> type, T object) {
    provider(type).removeProtection(object);
  }

  @Override
  public <T> void addProtection(ExploitProtectionType<T> type, T object)
      throws IllegalArgumentException {
    Preconditions.checkArgument(canProtect(type, object));
    ExploitProtectionStore<T> provider = provider(type);
    provider.addProtection(object);
  }

  @Override
  public <T> boolean isProtected(ExploitProtectionType<T> type, T object) {
    return provider(type).isProtected(object);
  }

  @Override
  public <T> boolean canProtect(ExploitProtectionType<T> type, T object) {
    return provider(type).canProtect(object);
  }

  @Override
  public <T> TemporalAmount getTotalProtectionDuration(ExploitProtectionType<T> type, T object)
      throws IllegalArgumentException {
    return provider(type).getTotalProtectionDuration(object);
  }

  @Override
  public @NotNull <T> TemporalAmount getRemainingProtectionTime(ExploitProtectionType<T> type,
      @NotNull T object) throws IllegalArgumentException {
    return provider(type).getRemainingProtectionTime(object);
  }

  @SuppressWarnings("unchecked")
  private <T> ExploitProtectionStore<T> provider(ExploitProtectionType<T> type) {
    return (ExploitProtectionStore<T>) protectionProviders.get(type.key());
  }
}
