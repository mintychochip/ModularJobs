package net.aincraft.service;

import com.google.common.base.Preconditions;
import java.time.Duration;
import java.time.temporal.TemporalAmount;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Supplier;
import net.aincraft.api.service.BlockExploitService;
import net.aincraft.api.service.BlockProtectionProvider;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.jetbrains.annotations.NotNull;

public class BlockExploitServiceImpl implements BlockExploitService {

  private static final Map<Material, Duration> blockProtectionDurations = new HashMap<>();

  private Supplier<? extends BlockProtectionProvider> providerSupplier = InMemoryBlockProtectionProviderImpl::new;

  static {
    blockProtectionDurations.put(Material.STONE, Duration.ofSeconds(60));
  }

  private final Map<ProtectionType, BlockProtectionProvider> providers = new HashMap<>();

  public BlockExploitServiceImpl() {
    providers.put(ProtectionType.PLACED, new InMemoryBlockProtectionProviderImpl());
    providers.put(ProtectionType.WAX, new InMemoryBlockProtectionProviderImpl());
  }

  @Override
  public void setProviderSupplier(Supplier<? extends BlockProtectionProvider> providerSupplier) {
    this.providerSupplier = providerSupplier;
  }

  @Override
  public void setProtectionProvider(ProtectionType type, BlockProtectionProvider provider) {
    providers.put(type, provider);
  }

  @Override
  public void addProtection(ProtectionType type, Block block) throws IllegalArgumentException {
    Preconditions.checkArgument(canProtect(block));
    BlockProtectionProvider provider = provider(type);
    provider.addProtection(block, blockProtectionDurations.get(block.getType()));
  }

  @Override
  public boolean isProtected(ProtectionType type, Block block) {
    return provider(type).isProtected(block);
  }

  @Override
  public boolean canProtect(Block block) {
    return blockProtectionDurations.containsKey(block.getType());
  }

  @Override
  public Duration getTotalProtectionDuration(Block block) throws IllegalArgumentException {
    Preconditions.checkArgument(canProtect(block));
    return blockProtectionDurations.get(block.getType());
  }

  @Override
  public @NotNull TemporalAmount getRemainingProtectionTime(ProtectionType type,
      @NotNull Block block) {
    BlockProtectionProvider provider = provider(type);
    return provider.getRemainingProtectionTime(block);
  }
  
  private BlockProtectionProvider provider(ProtectionType type) {
    return providers.computeIfAbsent(type, ignored -> providerSupplier.get());
  }
}
