package net.aincraft.api.service;

import java.time.temporal.TemporalAmount;
import net.aincraft.api.Bridge;
import net.kyori.adventure.key.Key;
import org.bukkit.block.Block;
import org.bukkit.entity.Entity;
import org.jetbrains.annotations.NotNull;

public interface ExploitService {

  static ExploitService exploitService() {
    return Bridge.bridge().exploitService();
  }

  <T> void removeProtection(ExploitProtectionType<T> type, T object);

  <T> void addProtection(ExploitProtectionType<T> type, T object) throws IllegalArgumentException;

  <T> boolean isProtected(ExploitProtectionType<T> type, T object);

  <T> boolean canProtect(ExploitProtectionType<T> type, T object);

  <T> TemporalAmount getTotalProtectionDuration(ExploitProtectionType<T> type, T object)
      throws IllegalArgumentException;

  @NotNull
  <T> TemporalAmount getRemainingProtectionTime(ExploitProtectionType<T> type, @NotNull T object)
      throws IllegalArgumentException;

  record ExploitProtectionType<T>(Key key) {

    public static final ExploitProtectionType<Block> WAX = new ExploitProtectionType<>(
        Key.key("exploit-protection", "wax"));

    public static final ExploitProtectionType<Block> PLACED = new ExploitProtectionType<>(
        Key.key("exploit-protection", "placed"));

    public static final ExploitProtectionType<Entity> DYE_ENTITY = new ExploitProtectionType<>(
        Key.key("exploit-protection", "dye-entity"));

    public static final ExploitProtectionType<Entity> MILK = new ExploitProtectionType<>(
        Key.key("exploit-protection", "milk"));
  }
}
